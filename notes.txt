Binary Search Trees

Key Terms

- Trees
- Child
- Parent
- Root
- Leaf
- Binary tree 
- Branch
- Subtree
- Binary search tree
- Balanced tree


Implementing a binary search tree

- Each node in a BST holds a key, a value, and left and right pointers
- The left and right pointers point to left and right child nodes
- each node has a parent unless it is the root node 

+ Put all that in a constructor that represents a single node in the tree

+ Optionally, you can pass in a key, value, and a pointer to the parent node

+ If the key value is null then the object represents an empty tree

+ If the parent pointer is null then you are dealing with a root node

+ The node starts with the left and right pointers to their child nodes being null

class BinarySearchTree {
  constructor(key = null, value = null, parent = null) {
    this.key = key;
    this.value = value;
    this.parent = parent;
    this.left = null;
    this.right = null;
  };
}

-- Binary Search Trees support 3 fundamental operations: insert, remove, and find.

Insertion

! If there is no existing tree, then the first item we insert will be the root 
  of the tree

- Insert a key, 10, into an existing tree
  1. start at the root  
  2. compare the root with 10 (the key we want to insert) to see if 10 will 
     be the left or right child of 5..
  3. 10 is greater than 5 so as you recall from the definition of BST, it will be
     a right child of 5.
  4. There is already a right child of 5. It is 19. So we have to decide if 10 
     will be on the right side or left side of 19. 
  5. 10 is less than 19 so it will be a left child of 19, so we follow the "left path"
     of 19.
  6. However, the left path of 19 already has a child which is 15
  7. We do our comparison of 15 with 10 again and see that 10 should be a left
     child of 15 because it is less than 15. 
  8. currently there is no left child of 15, so we can insert 10 as a left child of 15

* Binary Search Trees tend to be recursive in nature
* Each node in a tree is the root of a subtree beginning at that node
* Nesting trees in this manner can be achieved using recursion

- In tree recursion, you start with 'a' root, perform an action, and move
  to the left or right subtree (or both successively). This process continues
  until you reach a null reference, which is the end of a tree (and a good base case).

Implement insertion using recursion...

See index.js  

How does this insertion perform? 

- Essentially with insertion you have to iterate to the height of the tree.
- In the avg case nodes are inserted equally on the left and right branches
  - this produces what's called a 'balanced tree'
- because each 'row' in a balanced tree contains 2x as many nodes as in the row
  before, the width grows exponentially with the number of nodes.
- This means that conversely, the height must grow logarithmically with the number
  of nodes. 
    - so the avg case is O(log(n))

Worst case

- the worst case occurs when the tree takes its 'worst possible shape'
  meaning the tree skews (becomes larger) on left or right

- a skewed binary search tree (BST) is basically a linked list
- therefore you need to iterate through each of those nodes in order to get to the
  bottom of the tree to insert something
    - this makes the time complexity O(n) 
    - best case is when you insert the root and it is O(1)
    
Retrieval

- Retrieval of nodes follows the same patter as insertion..
  - Check the value of the key (you are retrieving) with the key stored in a node
    in the BST and recursively follow the left or right branch accordingly.


Practice
Is 18 in the tree?

            5
          /   \
        2       19
              /   \
            15    28
          /   \
        10    18

1. start at the root and see which we need to follow to find 18... left or right?
2. we check and see 18 is not the root
3. comparison check to see that 18 is greater than the root, so we follow the right
   child of the root, 19;
4. we compare the right child 19 to 18 and determine 18 is less than 19 so we veer
   left
5. we follow the left child (15) and determine that 18 is > 15 
6. we follow the 'right' path and find 18

- RECURSION TO FIND!!! See index.js find()

find(key) 

- takes a key as an argument
- contains 4 conditions
  * if
    - checks to see if key is the key of the root node
    - if it is then returns the value of the root (this.value)
  * else if
    - checks to see if key is less than root node and the root node has a left 
      child
    - if true recursively call find on the left and/or right child node until the 
      key is found
  * else if
    - checks to see if the key is greater than the root node and the root node has
      a right child
    - if right child exists recursively call find on the right and/or left child 
      node until the key is found.
    
  * else return a key error, 'key not found'


  REMOVAL

  - removing items from a BST is tricky...
  - use find to find the item you want to remove... you may have 3 things
    to think about...
    1. does the node have a child node or is it a leaf node (no child)
    2. does it have 1 child node (left or right)
    3. does it have 2 child nodes (left and right)
    -- no child, left child/right child, both

    Option 1.. node with no children (easiest)
    - the idea is to detach node from parent
  
let's say in the following example you want to detach or delete the item 18

            5
          /   \
        2     19
             /  \
           15    28
          /  \
        10    18 < -- this guy

Break the link to the parent (15)..


- With 1 child (a left child)

        28
      /
    21

first point the current child of the node you are removing to the 
parent of the node you are removing (19). Replace 21 as the right child of 
19. 

Node with 2 children

We must find a successor to replace the removed node..

- find the minimum value in the right subtree
- replace the value of the node to be removed with the found minimum
    - now the right subtree contains a duplicate; and
- apply remove to the right subtree to remove the duplicate

findMin()
replace()
remove()

1. find a successor in the right sub-tree (where larger values are)
2. find the 'minimum' element in the 'right-subtree' of 19. 
3. then find the left most subtree in that right side (20)
4. replace the value 19 with 20, (not replacing the actual node)
    - this means we now have 2 nodes with the same value; 20. 
5. remove 20 from the left sub-tree

see index.js for remove()